
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import koneksi.koneksi;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Infinix
 */
public class dataPeminjaman extends javax.swing.JDialog {

    private final Connection conn;

    public String getIdPeminjaman() {
        return idPeminjaman;
    }

    public String getTanggalPinjam() {
        return tanggalPinjam;
    }

    public String getTanggalKembali() {
        return tanggalKembali;
    }

    public String getIdAnggota() {
        return idAnggota;
    }

    public String getNamaAnggota() {
        return namaAnggota;
    }

    public String getIdBuku() {
        return idBuku;
    }

    public String getJudulBuku() {
        return judulBuku;
    }

    public String getPengarangBuku() {
        return pengarangBuku;
    }

    public String getJumlahPinjam() {
        return jumlahPinjam;
    }

    private String idPeminjaman;
    private String tanggalPinjam;
    private String tanggalKembali;
    private String idAnggota;
    private String namaAnggota;
    private String idBuku;
    private String judulBuku;
    private String pengarangBuku;
    private String jumlahPinjam;
    
    
    
    
    public dataPeminjaman(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        conn= koneksi.getKoneksi();
        setTableModel();
        loadData();
        actionButton();
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        txtSearch.setFont(new java.awt.Font("Rockwell", 2, 12)); // NOI18N
        txtSearch.setText("Search");
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel13.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 153, 153));
        jLabel13.setIcon(new javax.swing.ImageIcon("C:\\image\\icons8-people-32.png")); // NOI18N
        jLabel13.setText("Data Peminjam Buku Perpustakaan");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel13)
                        .addGap(0, 752, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtSearch))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addGap(26, 26, 26)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        // TODO add your handling code here:\
        searchData();
    }//GEN-LAST:event_txtSearchKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menuAnggota3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menuAnggota3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menuAnggota3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menuAnggota3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dataPeminjaman dialog = new dataPeminjaman(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel13;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables


    
    private void setTableModel() {
        DefaultTableModel model = new DefaultTableModel(
        new Object[]{"ID","Tanggal Pinjam", "Tangal Kembali", "ID Anggota","Nama Anggota","ID Buku","Judul Buku","Pengarang","Jumlah"},
                0
        );
        
        jTable1.setModel(model);
    }

    private void getData(int startIndex, int entriesPage, DefaultTableModel  model) {
       model.setRowCount(0);
        
        try{
            String sql = "SELECT *\n" +
                    "FROM detail_peminjaman pmd\n" +
                    "INNER JOIN peminjaman pm on pm.id_peminjaman = pmd.id_peminjaman\n" +
                    "INNER JOIN anggota agt ON agt.nama_anggota = pm.nama_anggota\n" +
                    "INNER JOIN buku bk ON bk.id_buku = pmd.id_buku\n" +
                    "WHERE status_peminjaman = 'Sedang dipinjam' LIMIT ?,?";
            try (PreparedStatement st = conn.prepareStatement(sql)){
                st.setInt(1, startIndex);
                st.setInt(2, entriesPage);
                ResultSet  rs = st.executeQuery();
                
                while (rs.next()){
                    String idPeminjaman = rs.getString("id_peminjaman");
                    String tanggalPinjam = rs.getString("tgl_peminjaman");
                    String tanggalKembali = rs.getString("tgl_pengembalian");
                    String idAnggota = rs.getString("id_anggota");
                    String namaAnggota = rs.getString("nama_anggota");
                    String idBuku = rs.getString("id_buku");
                    String judulBuku = rs.getString("judul_buku");
                    String pengarangBuku = rs.getString("pengarang");
                    String jumlahPinjam = rs.getString("jumlah_pinjam");
                    

                    
                    Object[] rowData = {idPeminjaman, tanggalPinjam, tanggalKembali,idAnggota,namaAnggota,idBuku,judulBuku,pengarangBuku,jumlahPinjam};
                    model.addRow(rowData);
                    
                }
            }
        }catch (SQLException e) {
            Logger.getLogger(dataPeminjaman.class.getName()).log(Level.SEVERE, null, e);
            
        }
            }
    
    private void searchData() {
    String kataKunci = txtSearch.getText();

    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);

    try {
        String sql = "SELECT * " +
                     "FROM detail_peminjaman pmd " +
                     "INNER JOIN peminjaman pm ON pm.id_peminjaman = pmd.id_peminjaman " +
                     "INNER JOIN anggota agt ON agt.id_anggota = pm.id_anggota " +
                     "INNER JOIN buku bk ON bk.id_buku = pmd.id_buku " +
                     "WHERE status_peminjaman = 'Sedang dipinjam' " +
                     "AND (agt.nama_anggota LIKE ? OR bk.judul_buku LIKE ?)";

        PreparedStatement st = conn.prepareStatement(sql);
        st.setString(1, "%" + kataKunci + "%");
        st.setString(2, "%" + kataKunci + "%");

        ResultSet rs = st.executeQuery();
        while (rs.next()) {
            String idPeminjaman = rs.getString("id_peminjaman");
            String tanggalPinjam = rs.getString("tgl_peminjaman");
            String tanggalKembali = rs.getString("tgl_pengembalian");
            String idAnggota = rs.getString("id_anggota");
            String namaAnggota = rs.getString("nama_anggota");
            String idBuku = rs.getString("id_buku");
            String judulBuku = rs.getString("judul_buku");
            String pengarangBuku = rs.getString("pengarang");
            String jumlahPinjam = rs.getString("jumlah_pinjam");

            Object[] rowData = {
                idPeminjaman,
                tanggalPinjam,
                tanggalKembali,
                idAnggota,
                namaAnggota,
                idBuku,
                judulBuku,
                pengarangBuku,
                jumlahPinjam
            };
            model.addRow(rowData);
        }

        rs.close();
        st.close();
    } catch (SQLException e) {
        Logger.getLogger(dataPeminjaman.class.getName()).log(Level.SEVERE, null, e);
    }
}

    
    private void loadData() {
        int startIndex = 0;
        int entriesPage = 10;
        getData(startIndex, entriesPage,(DefaultTableModel) jTable1.getModel());
    }

    private void actionButton() {
        txtSearch.addKeyListener(new KeyAdapter(){
            @Override
            public void keyReleased(KeyEvent e){
                searchData();
            }
        });
        
        jTable1.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e) {
                pilihData();
        }

            });
    }
    
    private void pilihData() {
            int row = jTable1.getSelectedRow();
            
            
           idPeminjaman = jTable1.getValueAt(row, 0).toString();
           tanggalPinjam = jTable1.getValueAt(row, 1).toString();
           tanggalKembali = jTable1.getValueAt(row, 2).toString();
           idAnggota = jTable1.getValueAt(row, 3).toString();
           namaAnggota = jTable1.getValueAt(row, 4).toString();
           idBuku = jTable1.getValueAt(row, 5).toString();
           judulBuku = jTable1.getValueAt(row, 6).toString();
           pengarangBuku = jTable1.getValueAt(row, 7).toString();
           jumlahPinjam = jTable1.getValueAt(row, 8).toString();
            dispose();

            }
}



